package ir.freeland.thread.synchronize;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
class SynchronizedCounter {
    private int count = 0;

    // Synchronized Method
    public void increment() {
    	System.out.println(Thread.currentThread().getName());
        count = count + 1;
    }

    public int getCount() {
        return count;
    }
}

public class RaceConditionExample2 {
    public static void main(String[] args) throws InterruptedException {
        ExecutorService executorService = Executors.newFixedThreadPool(10);

        SynchronizedCounter synchronizedCounter = new SynchronizedCounter();

        for(int i = 0; i < 1000; i++) {
            executorService.submit(() -> synchronizedCounter.increment());
        }

        executorService.shutdown();
        executorService.awaitTermination(60, TimeUnit.SECONDS);
        //The finall counter will not be 1000. It will be 992 or 996 or 993
        System.out.println("Final count is : " + synchronizedCounter.getCount());
    }
}